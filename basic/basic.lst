 AS V1.42 Beta [Bld 114] - source file basic.asm - page 1 - 12/12/2016 21:29:41


       1/       0 :                     	
       2/       0 :                     		cpu		8008new
       3/       0 :                     
       4/       0 :                     ;
       5/       0 :                     ;	variables A-Z, operators + - * / . (and) , (xor), 1 byte values all.
       6/       0 :                     ;
       7/       0 :                     ; 	keywords in lower case, variables in upper case.
       8/       0 :                     ;	: seperates program lines.
       9/       0 :                     ;
      10/       0 :                     ;	NOTE: Some commands have been renamed because only the first character matters
      11/       0 :                     ; 		  so RUN is now XECUTE and LIST is now VIEW
      12/       0 :                     ;
      13/       0 :                     ;	goto <expression>					Go to line number.
      14/       0 :                     ;	input <variable>					Input a number
      15/       0 :                     ; 	let <variable> = <expression> 		Assignment.
      16/       0 :                     ;	new 								Erase current program.
      17/       0 :                     ;	out <expression> 					Print character <expression> (e.g. out 42 prints '*')
      18/       0 :                     ;	print "<string>";<expression>[;] 	Print to terminal
      19/       0 :                     ;	stop 								Stop Program
      20/       0 :                     ;	view [<start line>] 				List 12 lines of current program.
      21/       0 :                     ;	xecute  							Run Program (BS breaks into a running program)
      22/       0 :                     ;
      23/       0 :                     ;	Coding to do:
      24/       0 :                     ;		if [!]<expr> [command] 
      25/       0 :                     ;		call <line>
      26/       0 :                     ;		return
      27/       0 :                     ;		key <variable>
      28/       0 :                     ;		+code to load program memory.
      29/       0 :                     ;
      30/       0 :                     
      31/       0 : =1000H              VariablePage = 	1000h 											; this page has variables offset from A = 0
      32/       0 : =1100H              InputPage = 	1100h 											; text input goes here.
      33/       0 : =1200H              UpdatePage = 	1200h 											; code to do ld (hl),x goes here+misc
      34/       0 :                     
      35/       0 : =2000H              ProgramMemory = 2000h 											; 127 program lines go here. 64 bytes each.
      36/       0 :                     																; line 1 at 2040h, 2 at 2080h etc.
      37/       0 :                     		org 	0
      38/       0 :                     
      39/       0 :                     ; ***********************************************************************************************
      40/       0 :                     ; ***********************************************************************************************
      41/       0 :                     ;
      42/       0 :                     ;									Main command loop
      43/       0 :                     ;
      44/       0 :                     ; ***********************************************************************************************
      45/       0 :                     ; ***********************************************************************************************
      46/       0 :                     
      47/       0 :                     NextCommand:
      48/       0 : 0E 5D               		mvi	 	b,']' 											; print a ] prompt
      49/       2 : 15                  		rst 	PrintCharacter 									
      50/       3 : 1D                  		rst 	InputLine 										; get the line.
      51/       4 : 46 DC 00            		call 	CommandExecute 									; execute it
      52/       7 : 05                  		rst 	NextCommand 									; loop back.
      53/       8 :                     
      54/       8 :                     ; ***********************************************************************************************
      55/       8 :                     ; ***********************************************************************************************
      56/       8 :                     ;
      57/       8 :                     ;							Read next non space character from (HL)
      58/       8 :                     ;
      59/       8 :                     ; ***********************************************************************************************
      60/       8 :                     ; ***********************************************************************************************
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 2 - 12/12/2016 21:29:41


      61/       8 :                     
      62/       8 :                     		org 	8
      63/       8 :                     GetNextCharacter:
      64/       8 : C7                  		mov 	a,m 											; read character.
      65/       9 : 30                  		inr 	l 												; and advance.
      66/       A : 3C 20               		cpi 	' '												; if space
      67/       C : 68 08 00            		jz 		GetNextCharacter 								; get another one.
      68/       F : 07                  		ret
      69/      10 :                     
      70/      10 :                     ; ***********************************************************************************************
      71/      10 :                     ; ***********************************************************************************************
      72/      10 :                     ;
      73/      10 :                     ;							Print Character in B, returned in A+B
      74/      10 :                     ;
      75/      10 :                     ; ***********************************************************************************************
      76/      10 :                     ; ***********************************************************************************************
      77/      10 :                     
      78/      10 :                     PrintCharacter:
      79/      10 : 43                  		in 		1 												; check the ready to send flag
      80/      11 : B0                  		ora 	a
      81/      12 : 50 10 00            		jp 		PrintCharacter 									; jump back if not ready
      82/      15 : C1                  		mov 	a,b 											; send B to port 8.
      83/      16 : 51                  		out 	8
      84/      17 : 07                  		ret
      85/      18 :                     
      86/      18 :                     ; ***********************************************************************************************
      87/      18 :                     ; ***********************************************************************************************
      88/      18 :                     ;	
      89/      18 :                     ;								Input a line to InputPage, ASCIIZ.
      90/      18 :                     ;
      91/      18 :                     ;	On exit HL points to line buffer.
      92/      18 :                     ;
      93/      18 :                     ; ***********************************************************************************************
      94/      18 :                     ; ***********************************************************************************************
      95/      18 :                     
      96/      18 :                     InputLine:
      97/      18 : 2E 11               		mvi 	h,InputPage/256 								; HL points to input buffer
      98/      1A :                     __CLStartLine:		
      99/      1A : 36 01               		mvi 	l,1  											; point to start of line+1
     100/      1C :                     __CLPreviousCharacter:		
     101/      1C : 31                  		dcr 	l 												; go back 1
     102/      1D : 70 1A 00            		jm 		__CLStartLine 									; gone too far, restart.
     103/      20 :                     __CLNextCharacterInput:
     104/      20 : 41                  		in 		0 												; read keyboard
     105/      21 : B0                  		ora 	a
     106/      22 : 68 20 00            		jz 		__CLNextCharacterInput
     107/      25 : C8                  		mov 	b,a 											; echo it
     108/      26 : 15                  		rst 	PrintCharacter
     109/      27 : C1                  		mov 	a,b 											; get character back.
     110/      28 : 3C 08               		cpi 	8 												; is it BS
     111/      2A : 68 1C 00            		jz 		__CLPreviousCharacter
     112/      2D : F8                  		mov 	m,a 											; write it out
     113/      2E : 30                  		inr 	l 												; next slot
     114/      2F : 2C 0D               		xri 	13   											; if CR then this will set A = 0
     115/      31 : 48 20 00            		jnz 	__CLNextCharacterInput
     116/      34 : 31                  		dcr 	l 												; replace last character with 00
     117/      35 : F8                  		mov 	m,a 
     118/      36 : F0                  		mov 	l,a 											; point HL to start of line.
     119/      37 : 07                  		ret
     120/      38 :                     
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 3 - 12/12/2016 21:29:41


     121/      38 :                     ; ***********************************************************************************************
     122/      38 :                     ; ***********************************************************************************************
     123/      38 :                     ;
     124/      38 :                     ;							Evaluate string at HL. Returns result in B. 
     125/      38 :                     ;
     126/      38 :                     ;	Operators are + - * / and , (xor) . (and). Terms are variables a-zA-Z and integer constants
     127/      38 :                     ;
     128/      38 :                     ;	Not awfully syntax checked :) x/0 returns 0. Technically : and up are all variables.
     129/      38 :                     ;
     130/      38 :                     ;	On exit HL points to found unknown character.
     131/      38 :                     ; 	On exit DE points to the line number if it's a program line (that way round)
     132/      38 :                     ;
     133/      38 :                     ; ***********************************************************************************************
     134/      38 :                     ; ***********************************************************************************************
     135/      38 :                     
     136/      38 :                     		org 	038h
     137/      38 :                     Evaluate:
     138/      38 : A8                  		xra 	a
     139/      39 : C8                  		mov 	b,a 											; b is current left value
     140/      3A : D8                  		mov 	d,a 											; d is current right value
     141/      3B : 16 01               		mvi 	c,1 											; c is current operator (+ = 1)
     142/      3D :                     AddDigit:
     143/      3D : E0                  		mov 	e,a 											; save new value in E
     144/      3E : C3                  		mov 	a,d 											; multiply D by 10
     145/      3F : 80                  		add 	a
     146/      40 : 80                  		add 	a
     147/      41 : 83                  		add 	d 												; A is now D x 5
     148/      42 : 80                  		add 	a 												; A is now D x 10
     149/      43 : 84                  		add 	e 												; add the new digit.
     150/      44 : D8                  		mov 	d,a 											; put back in D.
     151/      45 :                     NextCharacter:
     152/      45 : 0D                  		rst 	GetNextCharacter 								; get next character.
     153/      46 : 14 3A               		sui 	58 												; 58 - 127 are maybe variables.
     154/      48 : 50 72 00            		jp  	__IsVariable
     155/      4B : 04 0A               		adi 	10 												; 0-9 for digits.
     156/      4D : 50 3D 00            		jp 		AddDigit 										; if that, add to current right and goback.
     157/      50 : 04 06               		adi 	6 												; 0-5 for * + , - . /
     158/      52 : E0                  		mov 	e,a 											; save next operator in E.
     159/      53 : 46 87 00            		call 	SubEvaluator 									; do operation 0-5.
     160/      56 : C8                  		mov 	b,a 											; save the result in B
     161/      57 : 1E 00               		mvi 	d,0  											; clear the right hand side.
     162/      59 : D4                  		mov 	c,e 											; put next operator in C 
     163/      5A : C2                  		mov 	a,c 											; look at that operator
     164/      5B : B0                  		ora 	a 												; if +ve loop back next calculation
     165/      5C : 50 45 00            		jp 		NextCharacter 
     166/      5F : D9                  		mov 	d,b 											; put result in D
     167/      60 :                     ExitEvaluate1:		
     168/      60 : CB                  		mov 	b,d 											; put result in B
     169/      61 : 31                  		dcr  	l 												; gone too far, go back one.
     170/      62 : C1                  		mov 	a,b 											; get result to set up program pointer.
     171/      63 : 34 80               		ori 	080h 											; set bit 7 , which will be bit 5 if shift x 2
     172/      65 : 1A                  		rar 													; also CC for this.
     173/      66 : D8                  		mov 	d,a 											; put shifted right once into D
     174/      67 : 06 00               		mvi 	a,0 											; 
     175/      69 : 1A                  		rar  													; will clear C again.
     176/      6A : E0                  		mov 	e,a  									
     177/      6B : C3                  		mov 	a,d 											; now shift DE right once more.
     178/      6C : 1A                  		rar
     179/      6D : D8                  		mov 	d,a
     180/      6E : C4                  		mov 	a,e
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 4 - 12/12/2016 21:29:41


     181/      6F : 1A                  		rar
     182/      70 : E0                  		mov		e,a
     183/      71 :                     
     184/      71 : 07                  		ret
     185/      72 :                     ;
     186/      72 :                     ;		Variable ? A contains variable char - 58.
     187/      72 :                     ;		
     188/      72 :                     __IsVariable:
     189/      72 : 14 21               		sui 	91-58 											; if >= 91 this will be +ve
     190/      74 : 50 60 00            		jp 		ExitEvaluate1 								
     191/      77 : 04 1A               		adi 	26 												; if 0-25 then legit.
     192/      79 : 70 60 00            		jm 		ExitEvaluate1
     193/      7C : E6                  		mov 	e,l 											; save L in E
     194/      7D : F0                  		mov 	l,a 											; L is variable index
     195/      7E : C5                  		mov 	a,h 											; save H in A
     196/      7F : 2E 10               		mvi 	h,VariablePage/256 								; HL points to variable
     197/      81 : DF                  		mov 	d,m 											; read value into D
     198/      82 : E8                  		mov 	h,a 											; restore HL from AE
     199/      83 : F4                  		mov 	l,e
     200/      84 : 44 45 00            		jmp 	NextCharacter 									; and get the next character
     201/      87 :                     ;
     202/      87 :                     ;	We want to do B <op:D> C D = 0:* 1:+ 2:, 3:- 4:. 5:/ into A - don't change E 
     203/      87 :                     ;
     204/      87 :                     SubEvaluator:
     205/      87 : 11                  		dcr 	c 												; check for multiply (0:*)
     206/      88 : 70 AB 00            		jm 		__SEMultiply 
     207/      8B : C1                  		mov 	a,b 											; work out add (1:+)
     208/      8C : 83                  		add 	d
     209/      8D : 11                  		dcr 	c
     210/      8E : 33                  		rm 
     211/      8F : C1                  		mov 	a,b 											; work out logical xor (2:,)
     212/      90 : AB                  		xra 	d
     213/      91 : 11                  		dcr 	c
     214/      92 : 33                  		rm 
     215/      93 : C1                  		mov 	a,b 											; work out subtract (3:-)
     216/      94 : 93                  		sub 	d
     217/      95 : 11                  		dcr 	c
     218/      96 : 33                  		rm
     219/      97 : C1                  		mov 	a,b 											; work out and (4:.)
     220/      98 : A3                  		ana 	d
     221/      99 : 11                  		dcr 	c
     222/      9A : 33                  		rm
     223/      9B :                     																; so it must be divide (5:/)
     224/      9B : 46 A0 00            		call 	__SEDivide 										; the result is in C so saves a jump.
     225/      9E : C2                  		mov 	a,c
     226/      9F : 07                  		ret
     227/      A0 :                     ;
     228/      A0 :                     ;	subtractive division.
     229/      A0 :                     ;
     230/      A0 :                     __SEDivide:	
     231/      A0 : C3                  		mov 	a,d 											; check divide by zero.
     232/      A1 : B0                  		ora 	a 
     233/      A2 : 2B                  		rz  													; will return $FF
     234/      A3 : C1                  		mov 	a,b 											; subtract D from this N times. C = 0
     235/      A4 :                     __SEDivide1:
     236/      A4 : 93                  		sub 	d
     237/      A5 : 23                  		rc
     238/      A6 : 10                  		inr 	c
     239/      A7 : 2B                  		rz
     240/      A8 : 44 A4 00            		jmp 	__SEDivide1
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 5 - 12/12/2016 21:29:41


     241/      AB :                     ;
     242/      AB :                     ;	additive multiply
     243/      AB :                     ;
     244/      AB :                     __SEMultiply:	
     245/      AB : A8                  		xra 	a 												; total. (*0 becomes *256)
     246/      AC :                     __SEMultiply1:		
     247/      AC : 81                  		add 	b 												; add B to 0 D times.
     248/      AD : 19                  		dcr 	d
     249/      AE : 48 AC 00            		jnz 	__SEMultiply1
     250/      B1 : 07                  		ret
     251/      B2 :                     
     252/      B2 :                     ; ***********************************************************************************************
     253/      B2 :                     ;
     254/      B2 :                     ;								Print line at HL as its line number
     255/      B2 :                     ;
     256/      B2 :                     ; ***********************************************************************************************
     257/      B2 :                     
     258/      B2 :                     PrintLineNumber:
     259/      B2 : C5                  		mov 	a,h
     260/      B3 : 24 20               		ani 	20h 											; if not in program memory
     261/      B5 : 2B                  		rz 														; don't print it.
     262/      B6 : C6                  		mov 	a,l
     263/      B7 : 80                  		add 	a
     264/      B8 : D0                  		mov 	c,a
     265/      B9 : C5                  		mov 	a,h
     266/      BA : 8D                  		adc 	h
     267/      BB : D8                  		mov 	d,a
     268/      BC : C2                  		mov 	a,c
     269/      BD : 82                  		add 	c
     270/      BE : C3                  		mov 	a,d
     271/      BF : 8B                  		adc 	d
     272/      C0 : 24 7F               		ani 	07Fh
     273/      C2 : D8                  		mov 	d,a
     274/      C3 :                     
     275/      C3 :                     ; ***********************************************************************************************
     276/      C3 :                     ; ***********************************************************************************************
     277/      C3 :                     ;
     278/      C3 :                     ;									Print D as an integer
     279/      C3 :                     ;
     280/      C3 :                     ;	Breaks A,B,C,D
     281/      C3 :                     ; ***********************************************************************************************
     282/      C3 :                     ; ***********************************************************************************************
     283/      C3 :                     
     284/      C3 :                     PrintInteger:
     285/      C3 : 16 64               		mvi 	c,100 											; initial divisor
     286/      C5 :                     __PILoop:
     287/      C5 : 0E 2F               		mvi 	b,'0'-1 										; character to print/count division
     288/      C7 : C3                  		mov 	a,d 											; get integer
     289/      C8 :                     __PIDivide:
     290/      C8 : 08                  		inr 	b 												; one more 
     291/      C9 : D8                  		mov 	d,a 											; put pre-subtract back.
     292/      CA : 92                  		sub 	c												; subtract divisor
     293/      CB : 40 C8 00            		jnc  	__PIDivide 										; keep going till a borrow.
     294/      CE : 15                  		rst 	PrintCharacter 									; print the result.
     295/      CF : C2                  		mov 	a,c  											; convert 100-10
     296/      D0 : 14 5A               		sui 	90
     297/      D2 : D0                  		mov 	c,a
     298/      D3 : 40 C5 00            		jnc 	__PILoop 										; keep going if 10.
     299/      D6 : C3                  		mov 	a,d 											; get what is left
     300/      D7 : 34 30               		ori 	'0'												; make ASCII and print
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 6 - 12/12/2016 21:29:41


     301/      D9 : C8                  		mov 	b,a 											; it out.
     302/      DA : 15                  		rst 	PrintCharacter
     303/      DB : 07                  		ret
     304/      DC :                     
     305/      DC :                     ; ***********************************************************************************************
     306/      DC :                     ; ***********************************************************************************************
     307/      DC :                     ;
     308/      DC :                     ;										Execute Command at (HL)
     309/      DC :                     ;
     310/      DC :                     ; ***********************************************************************************************
     311/      DC :                     ; ***********************************************************************************************
     312/      DC :                     
     313/      DC :                     CommandExecute:
     314/      DC : 0D                  		rst 	GetNextCharacter 								; get character.
     315/      DD : C8                  		mov 	b,a 											; save in B
     316/      DE : 12                  		ral 													; shift left bit 6 into bit 7. basic # test
     317/      DF : B0                  		ora 	a 												; check if zero, signed.
     318/      E0 : 2B                  		rz
     319/      E1 : 50 31 01            		jp 		ProgramLine 									; if +ve it is a
     320/      E4 :                     
     321/      E4 :                     __SkipOverKeyword:
     322/      E4 : 0D                  		rst 	GetNextCharacter 								; get character
     323/      E5 : 04 9F               		adi 	256-97 											; CS if >= 97 e.g. lower case keyword
     324/      E7 : 60 E4 00            		jc 		__SkipOverKeyword 
     325/      EA : 31                  		dcr 	l  												; unpick the last get.
     326/      EB : C1                  		mov 	a,b 											; get the first character back.
     327/      EC :                     
     328/      EC : 3C 67               		cpi 	'g' 											; these ones come first, they change HL page.
     329/      EE : 68 9E 01            		jz 		COMMAND_Goto
     330/      F1 :                     
     331/      F1 : 46 FB 00            		call 	__CExecOne 										; execute one command.
     332/      F4 : 0D                  		rst 	GetNextCharacter 								; next is :
     333/      F5 : 3C 3A               		cpi 	':'
     334/      F7 : 68 DC 00            		jz 		CommandExecute
     335/      FA : 07                  		ret
     336/      FB :                     
     337/      FB :                     __CExecOne:
     338/      FB : 3C 6F               		cpi 	'o' 											; commands which won't change HL page.
     339/      FD : 68 83 01            		jz 		COMMAND_Out 
     340/     100 : 3C 6C               		cpi 	'l'
     341/     102 : 68 A7 01            		jz 		COMMAND_Let
     342/     105 : 3C 70               		cpi 	'p'
     343/     107 : 68 FE 01            		jz 		COMMAND_Print 	
     344/     10A : 3C 69               		cpi 	'i'
     345/     10C : 68 E1 01            		jz 		COMMAND_Input
     346/     10F : 3C 78               		cpi 	'x' 											; these ones are not speed important
     347/     111 : 68 8A 01            		jz 		COMMAND_eXecute
     348/     114 : 3C 76               		cpi 	'v' 	
     349/     116 : 68 51 01            		jz 		COMMAND_View
     350/     119 : 3C 6E               		cpi 	'n'
     351/     11B : 68 43 01            		jz 		COMMAND_New
     352/     11E : 3C 73               		cpi 	's' 
     353/     120 : 68 9D 01            		jz 		COMMAND_Stop
     354/     123 : 16 43               		mvi 	c,'C' 											; command error.
     355/     125 :                     
     356/     125 :                     ; ***********************************************************************************************
     357/     125 :                     ;
     358/     125 :                     ;								Report error, character code in C
     359/     125 :                     ;
     360/     125 :                     ; ***********************************************************************************************
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 7 - 12/12/2016 21:29:41


     361/     125 :                     
     362/     125 : 0E 3F               Error: 	mvi 	b,'?' 											; print ?
     363/     127 : 15                  		rst 	PrintCharacter
     364/     128 : CA                  		mov 	b,c
     365/     129 : 15                  		rst 	PrintCharacter 									; print error code
     366/     12A : 0E 40               		mvi 	b,'@' 											; print @
     367/     12C : 15                  		rst 	PrintCharacter 
     368/     12D : 46 B2 00            		call 	PrintLineNumber 								; print line number
     369/     130 : 05                  		rst 	NextCommand 									; go to command loop.
     370/     131 :                     
     371/     131 :                     ; ***********************************************************************************************
     372/     131 :                     ;
     373/     131 :                     ;									Put a program line into memory.
     374/     131 :                     ;
     375/     131 :                     ; ***********************************************************************************************
     376/     131 :                     
     377/     131 :                     ProgramLine:
     378/     131 : 31                  		dcr 	l 												; backspace to first character
     379/     132 : 3D                  		rst 	Evaluate 										; get line number into B, address into DE
     380/     133 : D6                  		mov 	c,l 											; C is the low byte of the input line.
     381/     134 : C1                  		mov 	a,b 											; exit if the line number is zero
     382/     135 :                     __PLCopy:
     383/     135 : B0                  		ora 	a
     384/     136 : 2B                  		rz		
     385/     137 : F2                  		mov 	l,c 											; read next byte from input line.
     386/     138 : 2E 11               		mvi 	h,InputPage/256		
     387/     13A : C7                  		mov 	a,m
     388/     13B : EB                  		mov 	h,d 											; write it out to address DE
     389/     13C : F4                  		mov 	l,e
     390/     13D : F8                  		mov 	m,a
     391/     13E : 10                  		inr 	c 												; increment two pointers
     392/     13F : 20                  		inr 	e 
     393/     140 : 44 35 01            		jmp 	__PLCopy 										; jump back and return if zero.
     394/     143 :                     
     395/     143 :                     ; ***********************************************************************************************
     396/     143 :                     ; ***********************************************************************************************
     397/     143 :                     ;
     398/     143 :                     ;										new : erase program completely
     399/     143 :                     ;
     400/     143 :                     ; ***********************************************************************************************
     401/     143 :                     ; ***********************************************************************************************
     402/     143 :                     
     403/     143 :                     COMMAND_New:
     404/     143 : 2E E0               		mvi 	h,ProgramMemory/256+0C0h 						; address has 2 MSB sets for zero check.
     405/     145 : A8                  		xra 	a 												; zero A and L
     406/     146 : F0                  		mov 	l,a
     407/     147 :                     __CN_Loop: 														; fill memory with zeros.
     408/     147 : F8                  		mov 	m,a
     409/     148 : 30                  		inr 	l
     410/     149 : 48 47 01            		jnz 	__CN_Loop
     411/     14C : 28                  		inr 	h
     412/     14D : 48 47 01            		jnz 	__CN_Loop
     413/     150 : 05                  		rst   	NextCommand
     414/     151 :                     
     415/     151 :                     ; ***********************************************************************************************
     416/     151 :                     ; ***********************************************************************************************
     417/     151 :                     ;
     418/     151 :                     ;									view [<start line>] : list program
     419/     151 :                     ;
     420/     151 :                     ; ***********************************************************************************************
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 8 - 12/12/2016 21:29:41


     421/     151 :                     ; ***********************************************************************************************
     422/     151 :                     
     423/     151 :                     COMMAND_View:
     424/     151 : 3D                  		rst 	Evaluate 										; line number in B, address in DE.
     425/     152 : EB                  		mov 	h,d 											; put line address in HL.
     426/     153 : F4                  		mov 	l,e 							 
     427/     154 : 26 0C               		mvi 	e,12 											; E is the number to print.
     428/     156 :                     __CL_Loop:
     429/     156 : C7                  		mov 	a,m 											; look at the code
     430/     157 : B0                  		ora 	a 												; if zero don't list it
     431/     158 : 68 6F 01            		jz 		__CL_Next
     432/     15B : 46 B2 00            		call 	PrintLineNumber 								; line
     433/     15E : 0E 20               		mvi 	b,' ' 											; space
     434/     160 :                     __CL_Print:
     435/     160 : 15                  		rst 	PrintCharacter 									; print
     436/     161 : CF                  		mov 	b,m 											; put char in B for printing
     437/     162 : 30                  		inr 	l 												; advance pointer
     438/     163 : C1                  		mov 	a,b 											; loop back if nz
     439/     164 : B0                  		ora 	a
     440/     165 : 48 60 01            		jnz 	__CL_Print
     441/     168 : 0E 0D               		mvi 	b,13 											; print new line.
     442/     16A : 15                  		rst 	PrintCharacter
     443/     16B : 21                  		dcr 	e 												; do 12 lines.
     444/     16C : 68 00 00            		jz 		NextCommand
     445/     16F :                     __CL_Next:
     446/     16F : 46 76 01            		call 	NextLine
     447/     172 : 48 56 01            		jnz 	__CL_Loop 										; go back. 
     448/     175 : 05                  		rst 	NextCommand
     449/     176 :                     
     450/     176 :                     ; ***********************************************************************************************
     451/     176 :                     ;
     452/     176 :                     ;			Advance pointer HL to next line. Return Z flag set if end of program
     453/     176 :                     ;
     454/     176 :                     ; ***********************************************************************************************
     455/     176 :                     
     456/     176 :                     NextLine:
     457/     176 : C6                  		mov 	a,l 											; go to next line. 
     458/     177 : 24 C0               		ani 	0C0h
     459/     179 : 04 40               		adi 	64
     460/     17B : F0                  		mov 	l,a
     461/     17C : C5                  		mov 	a,h
     462/     17D : 0C 00               		aci 	0
     463/     17F : E8                  		mov 	h,a
     464/     180 : 3C 40               		cpi 	40h 											; reached end of program memory
     465/     182 : 07                  		ret
     466/     183 :                     
     467/     183 :                     ; ***********************************************************************************************
     468/     183 :                     ; ***********************************************************************************************
     469/     183 :                     ;
     470/     183 :                     ;							out <expression> prints a character
     471/     183 :                     ;
     472/     183 :                     ; ***********************************************************************************************
     473/     183 :                     ; ***********************************************************************************************
     474/     183 :                     
     475/     183 :                     COMMAND_Out:
     476/     183 : 3D                  		rst 	Evaluate 										; out what ?
     477/     184 : C1                  		mov 	a,b 											; check not zero
     478/     185 : 24 7F               		ani 	07Fh
     479/     187 : 2B                  		rz  													; if so, exit.
     480/     188 : 15                  		rst 	PrintCharacter
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 9 - 12/12/2016 21:29:41


     481/     189 : 07                  		ret
     482/     18A :                     
     483/     18A :                     ; ***********************************************************************************************
     484/     18A :                     ; ***********************************************************************************************
     485/     18A :                     ;
     486/     18A :                     ;									Xecute : Run program
     487/     18A :                     ;
     488/     18A :                     ; ***********************************************************************************************
     489/     18A :                     ; ***********************************************************************************************
     490/     18A :                     
     491/     18A :                     COMMAND_eXecute:
     492/     18A : 2E 20               		mvi 	h,ProgramMemory / 256 							; start from here
     493/     18C : 36 00               		mvi 	l,0 
     494/     18E :                     __CR_Loop:
     495/     18E : 41                  		in 		0 												; check for Backspaces which exits.
     496/     18F : 3C 08               		cpi 	8
     497/     191 : 68 9D 01            		jz 		COMMAND_Stop
     498/     194 : 46 DC 00            		call 	CommandExecute 									; execute one line
     499/     197 : 46 76 01            		call 	NextLine 										; go to next line
     500/     19A : 48 8E 01            		jnz 	__CR_Loop 											
     501/     19D :                     COMMAND_Stop:		
     502/     19D : 05                  		rst   	NextCommand 									; end of program, go to next command.
     503/     19E :                     
     504/     19E :                     ; ***********************************************************************************************
     505/     19E :                     ; ***********************************************************************************************
     506/     19E :                     ;
     507/     19E :                     ;										Go to a new line
     508/     19E :                     ;
     509/     19E :                     ; ***********************************************************************************************
     510/     19E :                     ; ***********************************************************************************************
     511/     19E :                     
     512/     19E :                     COMMAND_Goto:
     513/     19E : 3D                  		rst 	Evaluate 										; evaluate line to go to
     514/     19F : F4                  		mov 	l,e 											; copy address to DE
     515/     1A0 : EB                  		mov 	h,d
     516/     1A1 : C1                  		mov 	a,b 											; if number found.
     517/     1A2 : B0                  		ora 	a
     518/     1A3 : 48 DC 00            		jnz 	CommandExecute 									; then go there.
     519/     1A6 : 05                  		rst 	NextCommand 									; goto 0 [stop]
     520/     1A7 :                     
     521/     1A7 :                     ; ***********************************************************************************************
     522/     1A7 :                     ; ***********************************************************************************************
     523/     1A7 :                     ;
     524/     1A7 :                     ;									let <variable> = <expression>
     525/     1A7 :                     ;
     526/     1A7 :                     ; ***********************************************************************************************
     527/     1A7 :                     ; ***********************************************************************************************
     528/     1A7 :                     
     529/     1A7 :                     COMMAND_Let:
     530/     1A7 : 46 C1 01            		call 	SetUpSaveVariable 								; code to set up variable update.
     531/     1AA : 0D                  		rst 	GetNextCharacter  								; check for equal
     532/     1AB : 3C 3D               		cpi 	'='
     533/     1AD : 48 BC 01            		jnz 	SyntaxError
     534/     1B0 : 3D                  		rst 	Evaluate 										; evaluate RHS.
     535/     1B1 :                     
     536/     1B1 :                     ; ***********************************************************************************************
     537/     1B1 :                     ;
     538/     1B1 :                     ;								Save value in B in preset variable
     539/     1B1 :                     ;
     540/     1B1 :                     ; ***********************************************************************************************
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 10 - 12/12/2016 21:29:41


     541/     1B1 :                     
     542/     1B1 :                     SaveBInVar:
     543/     1B1 : DD                  		mov 	d,h 					 						; save HL
     544/     1B2 : E6                  		mov 	e,l
     545/     1B3 : 46 00 12            		call 	UpdatePage 										; load L.
     546/     1B6 : 2E 10               		mvi 	h,VariablePage/256 								; and H.
     547/     1B8 : F9                  		mov 	m,b 											; write result out.
     548/     1B9 : EB                  		mov 	h,d 											; restore HL
     549/     1BA : F4                  		mov 	l,e
     550/     1BB : 07                  		ret  													; and done.
     551/     1BC :                     
     552/     1BC :                     ; ***********************************************************************************************
     553/     1BC :                     ;
     554/     1BC :                     ;										Report Syntax Error
     555/     1BC :                     ;
     556/     1BC :                     ; ***********************************************************************************************
     557/     1BC :                     
     558/     1BC :                     SyntaxError: 													; (S)yntax error
     559/     1BC : 16 53               		mvi 	c,'S'
     560/     1BE : 44 25 01            		jmp 	Error
     561/     1C1 :                     
     562/     1C1 :                     ; ***********************************************************************************************
     563/     1C1 :                     ;
     564/     1C1 :                     ;				Set up to save a value in next variable in line. (puts MVI L,nn;RET)
     565/     1C1 :                     ;
     566/     1C1 :                     ; ***********************************************************************************************
     567/     1C1 :                     
     568/     1C1 :                     SetUpSaveVariable:
     569/     1C1 : 0D                  		rst 	GetNextCharacter 								; get the character
     570/     1C2 : 14 5B               		sui 	65+26 											; check if > 'Z'.
     571/     1C4 : 50 DC 01            		jp 		__SUSError
     572/     1C7 : 04 1A               		adi 	26 												; check if < 'A'
     573/     1C9 : 70 DC 01            		jm 		__SUSError
     574/     1CC : DD                  		mov 	d,h 											; save HL.
     575/     1CD : E6                  		mov 	e,l
     576/     1CE : 2E 12               		mvi 	h,UpdatePage/256 								; HL points to update page.
     577/     1D0 : 36 00               		mvi 	l,0
     578/     1D2 : 3E 36               		mvi 	m,036h 											; MVI L command
     579/     1D4 : 30                  		inr 	l
     580/     1D5 : F8                  		mov 	m,a 											; address to load into L
     581/     1D6 : 30                  		inr 	l
     582/     1D7 : 3E 07               		mvi 	m,7 											; RET
     583/     1D9 : EB                  		mov 	h,d 											; restore HL
     584/     1DA : F4                  		mov 	l,e
     585/     1DB : 07                  		ret
     586/     1DC :                     __SUSError:
     587/     1DC : 16 56               		mvi 	c,'V' 											; report (V)ariable error.
     588/     1DE : 44 25 01            		jmp 	Error
     589/     1E1 :                     
     590/     1E1 :                     ; ***********************************************************************************************
     591/     1E1 :                     ;
     592/     1E1 :                     ;											input <variable>
     593/     1E1 :                     ;
     594/     1E1 :                     ; ***********************************************************************************************
     595/     1E1 :                     
     596/     1E1 :                     Command_Input:
     597/     1E1 : 46 C1 01            		call 	SetUpSaveVariable 								; get ready to set up.
     598/     1E4 : DD                  		mov 	d,h 											; save HL in DE
     599/     1E5 : E6                  		mov 	e,l
     600/     1E6 : 2E 12               		mvi 	h,UpdatePage/256 								; save HL in update page
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 11 - 12/12/2016 21:29:41


     601/     1E8 : 36 10               		mvi 	l,10h
     602/     1EA : FB                  		mov 	m,d
     603/     1EB : 30                  		inr 	l
     604/     1EC : FC                  		mov 	m,e
     605/     1ED : 0E 3F               		mvi 	b,'?'											; prompt
     606/     1EF : 15                  		rst 	PrintCharacter
     607/     1F0 : 1D                  		rst 	InputLine 										; read line.
     608/     1F1 : 3D                  		rst 	Evaluate 										; evaluate, result now in B.
     609/     1F2 : 46 B1 01            		call 	SaveBInVar 										; save the result
     610/     1F5 : 36 10               		mvi 	l,10h 											; restore HL
     611/     1F7 : 2E 12               		mvi 	h,UpdatePage/256 				
     612/     1F9 : C7                  		mov 	a,m
     613/     1FA : 30                  		inr 	l
     614/     1FB : F7                  		mov 	l,m
     615/     1FC : E8                  		mov 	h,a
     616/     1FD : 07                  		ret 													; and exit.
     617/     1FE :                     
     618/     1FE :                     ; ***********************************************************************************************
     619/     1FE :                     ;
     620/     1FE :                     ;								print <variable> "<string>" ; 
     621/     1FE :                     ;
     622/     1FE :                     ; ***********************************************************************************************
     623/     1FE :                     
     624/     1FE :                     Command_Print:
     625/     1FE : 0D                  		rst 	GetNextCharacter 								; get character
     626/     1FF : 3C 22               		cpi 	'"' 											; if " then it is a string.
     627/     201 : 68 21 02            		jz 		__CP_String 									
     628/     204 : B0                  		ora 	a 												; if zero then command ends.
     629/     205 : 68 1C 02            		jz 		__CP_EndPrint
     630/     208 : 3C 3A               		cpi 	':'												; if colon, then command ends.
     631/     20A : 68 1C 02            		jz 		__CP_EndPrint
     632/     20D : 3C 3B               		cpi 	';' 											; if not semicolon then expression
     633/     20F : 48 31 02            		jnz 	__CP_Expression
     634/     212 :                     ;
     635/     212 :                     ;		Found a semicolon so if followed by : or NULL, exit without newline
     636/     212 :                     ;
     637/     212 : 0D                  		rst 	GetNextCharacter 								; semicolon found, get next char and undo incr
     638/     213 : 31                  		dcr 	l
     639/     214 : B0                  		ora 	a 												; if end of command exit.
     640/     215 : 2B                  		rz 
     641/     216 : 3C 3A               		cpi 	':' 											; which is either end of line or semicolon.
     642/     218 : 2B                  		rz
     643/     219 : 44 FE 01            		jmp 	Command_Print 									; no, go and print again.
     644/     21C :                     ;
     645/     21C :                     ;		Found colon or NULL, so exit with newline
     646/     21C :                     ;
     647/     21C :                     __CP_EndPrint: 													; end of command
     648/     21C : 31                  		dcr 	l 												; undo the get.
     649/     21D :                     __CP_CRAndExit:		
     650/     21D : 0E 0D               		mvi 	b,13 											; print CR
     651/     21F : 15                  		rst 	PrintCharacter
     652/     220 : 07                  		ret 													; and exit.
     653/     221 :                     ;
     654/     221 :                     ;		Quoted String
     655/     221 :                     ;
     656/     221 :                     __CP_String:
     657/     221 : C7                  		mov 	a,m 											; read next characted, not skipping spaces.
     658/     222 : B0                  		ora 	a 
     659/     223 : 68 1D 02            		jz 		__CP_CRAndExit 									; end of line, print CR and exit.
     660/     226 : 30                  		inr 	l 												; advance pointer 
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 12 - 12/12/2016 21:29:41


     661/     227 : 3C 22               		cpi 	'"'												; if closing quote start again
     662/     229 : 68 FE 01            		jz 		Command_Print 
     663/     22C : C8                  		mov 	b,a 											; otherwise print and loop
     664/     22D : 15                  		rst 	PrintCharacter
     665/     22E : 44 21 02            		jmp 	__CP_String
     666/     231 :                     ;
     667/     231 :                     ;		Numerical expression.
     668/     231 :                     ;		
     669/     231 :                     __CP_Expression:
     670/     231 : 31                  		dcr 	l 												; start of expression
     671/     232 : 0E 20               		mvi 	b,' '											; print a space
     672/     234 : 15                  		rst 	PrintCharacter
     673/     235 : 3D                  		rst 	Evaluate 										; get expression
     674/     236 : D9                  		mov 	d,b 											; move value into D
     675/     237 : 46 C3 00            		call 	PrintInteger 									; print it
     676/     23A : 44 FE 01            		jmp 	COMMAND_Print 									; and loop back.
     677/     23D :                     
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 13 - 12/12/2016 21:29:41


  symbol table (* = unused):
  ------------------------

 ADDDIGIT :                      3D C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  COMMANDEXECUTE :                DC C |
 COMMAND_EXECUTE :              18A C |  COMMAND_GOTO :                 19E C |
 COMMAND_INPUT :                1E1 C |  COMMAND_LET :                  1A7 C |
 COMMAND_NEW :                  143 C |  COMMAND_OUT :                  183 C |
 COMMAND_PRINT :                1FE C |  COMMAND_STOP :                 19D C |
 COMMAND_VIEW :                 151 C | *CONSTPI :        3.141592653589793 - |
*DATE :                  12/12/2016 - |  ERROR :                        125 C |
 EVALUATE :                      38 C |  EXITEVALUATE1 :                 60 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETNEXTCHARACTER :               8 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
 INPUTLINE :                     18 C |  INPUTPAGE :                   1100 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                     8008E - | *MOMCPUNAME :               8008NEW - |
*NESTMAX :                      100 - |  NEXTCHARACTER :                 45 C |
 NEXTCOMMAND :                    0 C |  NEXTLINE :                     176 C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINTCHARACTER :                10 C |  PRINTINTEGER :                  C3 C |
 PRINTLINENUMBER :               B2 C |  PROGRAMLINE :                  131 C |
 PROGRAMMEMORY :               2000 - | *RELAXED :                        0 - |
 SAVEBINVAR :                   1B1 C |  SETUPSAVEVARIABLE :            1C1 C |
 SUBEVALUATOR :                  87 C |  SYNTAXERROR :                  1BC C |
*TIME :                    21:29:41 - | *TRUE :                           1 - |
 UPDATEPAGE :                  1200 - |  VARIABLEPAGE :                1000 - |
*VERSION :                     142F - |  __CEXECONE :                    FB C |
 __CLNEXTCHARACTERINPUT :        20 C |  __CLPREVIOUSCHARACTER :         1C C |
 __CLSTARTLINE :                 1A C |  __CL_LOOP :                    156 C |
 __CL_NEXT :                    16F C |  __CL_PRINT :                   160 C |
 __CN_LOOP :                    147 C |  __CP_CRANDEXIT :               21D C |
 __CP_ENDPRINT :                21C C |  __CP_EXPRESSION :              231 C |
 __CP_STRING :                  221 C |  __CR_LOOP :                    18E C |
 __ISVARIABLE :                  72 C |  __PIDIVIDE :                    C8 C |
 __PILOOP :                      C5 C |  __PLCOPY :                     135 C |
 __SEDIVIDE :                    A0 C |  __SEDIVIDE1 :                   A4 C |
 __SEMULTIPLY :                  AB C |  __SEMULTIPLY1 :                 AC C |
 __SKIPOVERKEYWORD :             E4 C |  __SUSERROR :                   1DC C |

     82 symbols
     28 unused symbols

 AS V1.42 Beta [Bld 114] - source file basic.asm - page 14 - 12/12/2016 21:29:41


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    677 lines source file
      2 passes
      0 errors
      0 warnings
