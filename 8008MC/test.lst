 AS V1.42 Beta [Bld 114] - source file test.asm - page 1 - 8/12/2016 9:58:01


       1/       0 :                     	
       2/       0 :                     		cpu		8008new
       3/       0 :                     
       4/       0 :                     
       5/       0 : =800H               VariablePage = 0800h 											; this page has variables offset from ASCII 58
       6/       0 : =900H               InputPage = 0900h 												; text input goes here.
       7/       0 : =2000H              ProgramMemory = 2000h 											; 127 program lines go here. 64 bytes each.
       8/       0 :                     
       9/       0 :                     		org 	0
      10/       0 : 44 00 07            		jmp 	0700h
      11/       3 :                     
      12/     700 :                     		org 	0700h
      13/     700 : 2E 08               		mvi 	h,VariablePage/256
      14/     702 : 36 07               		mvi 	l,7
      15/     704 : 3E 25               		mvi 	m,37
      16/     706 :                     
      17/     706 : 2E 07               		mvi 	h,Sum / 256
      18/     708 : 36 0E               		mvi 	l,Sum & 255
      19/     70A : 15                  		rst 	Evaluate
      20/     70B : 44 0B 07            Stop:	jmp 	Stop
      21/     70E :                     
      22/     70E :                     Sum:
      23/     70E : 37 00               		db 		"7",0
      24/     710 :                     
      25/     710 :                     
      26/     710 :                     ; ***********************************************************************************************
      27/     710 :                     ; ***********************************************************************************************
      28/     710 :                     ;
      29/     710 :                     ;		Routine : 8 bytes. Read next non space character from (HL)
      30/     710 :                     ;
      31/     710 :                     ; ***********************************************************************************************
      32/     710 :                     ; ***********************************************************************************************
      33/     710 :                     
      34/       8 :                     		org 	8
      35/       8 :                     GetNextCharacter:
      36/       8 : C7                  		mov 	a,m 											; read character.
      37/       9 : 30                  		inr 	l 												; and advance.
      38/       A : 3C 20               		cpi 	' '												; if space
      39/       C : 68 1D 00            		jz 		NextCharacter 									; get another one.
      40/       F : 07                  		ret
      41/      10 :                     
      42/      10 :                     ; ***********************************************************************************************
      43/      10 :                     ; ***********************************************************************************************
      44/      10 :                     ;
      45/      10 :                     ;	Evaluate string at HL. Returns result in B. Operators are + - * / and , (xor) . (and)
      46/      10 :                     ;
      47/      10 :                     ;	Not awfully syntax checked :) x/0 returns 0.
      48/      10 :                     ;
      49/      10 :                     ;	On exit HL points to found unknown character.
      50/      10 :                     ; 	On exit ED points to the line number if it's a program line (that way round)
      51/      10 :                     ;
      52/      10 :                     ; ***********************************************************************************************
      53/      10 :                     ; ***********************************************************************************************
      54/      10 :                     
      55/      10 :                     Evaluate:
      56/      10 : A8                  		xra 	a
      57/      11 : C8                  		mov 	b,a 											; b is current left value
      58/      12 : D8                  		mov 	d,a 											; d is current right value
      59/      13 : 16 01               		mvi 	c,1 											; c is current operator (+ = 1)
      60/      15 :                     AddDigit:
 AS V1.42 Beta [Bld 114] - source file test.asm - page 2 - 8/12/2016 9:58:01


      61/      15 : E0                  		mov 	e,a 											; save new value in E
      62/      16 : C3                  		mov 	a,d 											; multiply D by 10
      63/      17 : 80                  		add 	a
      64/      18 : 80                  		add 	a
      65/      19 : 83                  		add 	d 												; A is now D x 5
      66/      1A : 80                  		add 	a 												; A is now D x 10
      67/      1B : 84                  		add 	e 												; add the new digit.
      68/      1C : D8                  		mov 	d,a 											; put back in D.
      69/      1D :                     NextCharacter:
      70/      1D : 0D                  		rst 	GetNextCharacter 								; get next character.
      71/      1E : 14 3A               		sui 	58 												; 58 - 127 are ALL variables.
      72/      20 : 50 47 00            		jp  	__IsVariable
      73/      23 : 04 0A               		adi 	10 												; 0-9 for digits.
      74/      25 : 50 15 00            		jp 		AddDigit 										; if that, add to current right and goback.
      75/      28 : 04 06               		adi 	6 												; 0-5 for * + , - . /
      76/      2A : E0                  		mov 	e,a 											; save next operator in E.
      77/      2B : 46 52 00            		call 	SubEvaluator 									; do operation 0-5.
      78/      2E : C8                  		mov 	b,a 											; save the result in B
      79/      2F : 1E 00               		mvi 	d,0  											; clear the right hand side.
      80/      31 : D4                  		mov 	c,e 											; put next operator in C 
      81/      32 : C2                  		mov 	a,c 											; look at that operator
      82/      33 : B0                  		ora 	a 												; if +ve loop back next calculation
      83/      34 : 50 1D 00            		jp 		NextCharacter 
      84/      37 : 31                  		dcr  	l 												; gone too far, go back one.
      85/      38 :                     
      86/      38 : C1                  		mov 	a,b 											; get result to set up program pointer.
      87/      39 : 34 80               		ori 	080h 											; set bit 7 , which will be bit 5 if shift x 2
      88/      3B : 1A                  		rar 													; also CC for this.
      89/      3C : E0                  		mov 	e,a 											; put shifted right once into E.
      90/      3D : C3                  		mov 	a,d 											; D is already zero, why it is ED not DE
      91/      3E : 1A                  		rar  													; will clear C again.
      92/      3F : D8                  		mov 	d,a  									
      93/      40 : C4                  		mov 	a,e 											; now shift ED right once more.
      94/      41 : 1A                  		rar
      95/      42 : E0                  		mov 	e,a
      96/      43 : C3                  		mov 	a,d
      97/      44 : 1A                  		rar
      98/      45 : D8                  		mov		d,a
      99/      46 :                     
     100/      46 : 07                  		ret
     101/      47 :                     ;
     102/      47 :                     ;		Contains 0-69 which are the variables.
     103/      47 :                     ;		
     104/      47 :                     __IsVariable:
     105/      47 : E6                  		mov 	e,l 											; save L in E
     106/      48 : F0                  		mov 	l,a 											; L is variable index
     107/      49 : C5                  		mov 	a,h 											; save H in A
     108/      4A : 2E 08               		mvi 	h,VariablePage/256 								; HL points to variable
     109/      4C : DF                  		mov 	d,m 											; read value into D
     110/      4D : E8                  		mov 	h,a 											; restore HL from AE
     111/      4E : F4                  		mov 	l,e
     112/      4F : 44 1D 00            		jmp 	NextCharacter 									; and get the next character
     113/      52 :                     ;
     114/      52 :                     ;	We want to do B <op:D> C D = 0:* 1:+ 2:, 3:- 4:. 5:/ into A - don't change E 
     115/      52 :                     ;
     116/      52 :                     SubEvaluator:
     117/      52 : 11                  		dcr 	c 												; check for multiply (0:*)
     118/      53 : 70 76 00            		jm 		__SEMultiply 
     119/      56 : C1                  		mov 	a,b 											; work out add (1:+)
     120/      57 : 83                  		add 	d
 AS V1.42 Beta [Bld 114] - source file test.asm - page 3 - 8/12/2016 9:58:01


     121/      58 : 11                  		dcr 	c
     122/      59 : 33                  		rm 
     123/      5A : C1                  		mov 	a,b 											; work out logical xor (2:,)
     124/      5B : AB                  		xra 	d
     125/      5C : 11                  		dcr 	c
     126/      5D : 33                  		rm 
     127/      5E : C1                  		mov 	a,b 											; work out subtract (3:-)
     128/      5F : 93                  		sub 	d
     129/      60 : 11                  		dcr 	c
     130/      61 : 33                  		rm
     131/      62 : C1                  		mov 	a,b 											; work out and (4:.)
     132/      63 : A3                  		ana 	d
     133/      64 : 11                  		dcr 	c
     134/      65 : 33                  		rm
     135/      66 :                     																; so it must be divide (5:/)
     136/      66 : 46 6B 00            		call 	__SEDivide 										; the result is in C so saves a jump.
     137/      69 : C2                  		mov 	a,c
     138/      6A : 07                  		ret
     139/      6B :                     ;
     140/      6B :                     ;	subtractive division.
     141/      6B :                     ;
     142/      6B :                     __SEDivide:	
     143/      6B : C3                  		mov 	a,d 											; check divide by zero.
     144/      6C : B0                  		ora 	a 
     145/      6D : 2B                  		rz  													; will return $FF
     146/      6E : C1                  		mov 	a,b 											; subtract D from this N times. C = 0
     147/      6F :                     __SEDivide1:
     148/      6F : 93                  		sub 	d
     149/      70 : 23                  		rc
     150/      71 : 10                  		inr 	c
     151/      72 : 2B                  		rz
     152/      73 : 44 6F 00            		jmp 	__SEDivide1
     153/      76 :                     ;
     154/      76 :                     ;	additive multiply
     155/      76 :                     ;
     156/      76 :                     __SEMultiply:	
     157/      76 : A8                  		xra 	a 												; total. (*0 becomes *256)
     158/      77 :                     __SEMultiply1:		
     159/      77 : 81                  		add 	b 												; add B to 0 D times.
     160/      78 : 19                  		dcr 	d
     161/      79 : 48 77 00            		jnz 	__SEMultiply1
     162/      7C : 07                  		ret
     163/      7D :                     
 AS V1.42 Beta [Bld 114] - source file test.asm - page 4 - 8/12/2016 9:58:01


  symbol table (* = unused):
  ------------------------

 ADDDIGIT :                      15 C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                   8/12/2016 - |  EVALUATE :                      10 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETNEXTCHARACTER :               8 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INPUTPAGE :                    900 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                     8008E - |
*MOMCPUNAME :               8008NEW - | *NESTMAX :                      100 - |
 NEXTCHARACTER :                 1D C | *PACKING :                        0 - |
*PADDING :                        1 - | *PROGRAMMEMORY :               2000 - |
*RELAXED :                        0 - |  STOP :                         70B C |
 SUBEVALUATOR :                  52 C |  SUM :                          70E C |
*TIME :                     9:58:01 - | *TRUE :                           1 - |
 VARIABLEPAGE :                 800 - | *VERSION :                     142F - |
 __ISVARIABLE :                  47 C |  __SEDIVIDE :                    6B C |
 __SEDIVIDE1 :                   6F C |  __SEMULTIPLY :                  76 C |
 __SEMULTIPLY1 :                 77 C |

     43 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 114] - source file test.asm - page 5 - 8/12/2016 9:58:01


  codepages:
  ----------

STANDARD (0 changed characters)


0.00 seconds assembly time

    163 lines source file
      2 passes
      0 errors
      0 warnings
